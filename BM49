import java.util.*;


public class Solution {
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     * 返回表达式的值
     * @param s string字符串 待计算的表达式
     * @return int整型
     */
    public int solve (String s) {
        char[] arr = s.replaceAll(" ","").toCharArray();
        LinkedList<Integer> stack=new LinkedList<>();
        int num=0;
        char sign='+';
        for(int i=0;i<arr.length;i++){
            char c=arr[i];
            if(Character.isDigit(c)){
                num=num*10+c-'0';
            }
            //遇到括号就截取括号内的字符串，再递归
            if(c=='('){
                int j=i+1;
                int flag=1;
                while(flag>0){
                    if(arr[j]=='(') flag++;
                    if(arr[j]==')') flag--;
                    j++;
                }
                num=solve(s.substring(i+1,j-1));
                i=j-1;
            }
            if(!Character.isDigit(c) || i==arr.length-1){
                //+-直接放，*/栈顶*num(遍历到的数字)再放
                if(sign == '+') stack.push(num);
                else if(sign == '-') stack.push(-1 * num);
                else if(sign == '*') stack.push(stack.pop() * num);
                else if(sign == '/') stack.push(stack.pop() / num);
                num=0;
                sign=c;
            }
        }
        int res=0;
        while(!stack.isEmpty()){
            res+=stack.pop();
        }
        return res;
    }
}
