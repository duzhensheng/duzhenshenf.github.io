import java.util.*;
public class Solution {
    public ListNode addInList (ListNode head1, ListNode head2) {
        if(head1 == null)return head2;
        if(head2 == null){
            return head1;
        }// 进行判空处理
        head1 = reverse(head1);// 反转h1链表
        head2 = reverse(head2);// 反转h2链表
        ListNode head = new ListNode(-1);
        ListNode nHead = head;// 创建新的链表头节点
        int tmp = 0;// 记录进位的数值
        while(head1 != null || head2 != null){
            int val = tmp;// val用来累加此时的数值（加数+加数+上一位的进位=当前总的数值）
            if (head1 != null) {
                val += head1.val;
                head1 = head1.next;
            }// 当节点不为空的时候，则需要加上当前节点的值
            if (head2 != null) {
                val += head2.val;
                head2 = head2.next;
            }// 当节点不为空的时候，则需要加上当前节点的值
            tmp = val/10;// 求出进位
            nHead.next = new ListNode(val%10);// 进位后剩下的数值即为当前节点的数值
            nHead = nHead.next;// 下一个节点
        }
        if(tmp > 0){
            nHead.next = new ListNode(tmp);
        }// 最后当两条链表都加完的时候，进位不为0的时候，则需要再加上这个进位
        return reverse(head.next);
    }// 重新反转回来返回
  
    // 反转链表
    ListNode reverse(ListNode head){
        if(head == null)
            return head;
        ListNode cur = head;
        ListNode node = null;
        while(cur != null){
            ListNode tail = cur.next;
            cur.next = node;
            node = cur;
            cur = tail;
        }
        return node;
    }
}
